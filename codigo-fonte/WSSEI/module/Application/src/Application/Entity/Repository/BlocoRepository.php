<?php

namespace Application\Entity\Repository;

use Base\Entity\Repository\AbstractEntityRepository;
use Application;
use Application\Entity\Protocolo;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AnotacaoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BlocoRepository extends AbstractEntityRepository
{
    private function array_sort($array, $on, $order=SORT_ASC)
    {
        $new_array = array();
        $sortable_array = array();

        if (count($array) > 0) {
            foreach ($array as $k => $v) {
                if (is_array($v)) {
                    foreach ($v as $k2 => $v2) {
                        if ($k2 == $on) {
                            $sortable_array[$k] = $v2;
                        }
                    }
                } else {
                    $sortable_array[$k] = $v;
                }
            }

            switch ($order) {
                case SORT_ASC:
                    asort($sortable_array);
                    break;
                case SORT_DESC:
                    arsort($sortable_array);
                    break;
            }

            foreach ($sortable_array as $k => $v) {
                $new_array[$k] = $array[$k];
            }
        }

        return $new_array;
    }

    public function pesquisarBloco($unidade, $offset, $limit)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('b')
            ->from('Application\Entity\Bloco', 'b')
            ->join('b.relBlocoUnidade', 'bu')
            ->Where('bu.idUnidade = :unidade')
            ->orWhere('b.idUnidade = :unidade')
            ->andWhere($qb->expr()->In('b.staTipo', array('A')))
            ->andWhere($qb->expr()->In('b.staEstado', array('D', 'C', 'R', 'A')))
            ->setParameter('unidade', $unidade)
            ->addOrderBy('b.idBloco', 'DESC');

        $qb->setFirstResult($offset)
            ->setMaxResults($limit);

        $paginator = new Paginator($qb, true);

        $resultBloco = $paginator->getQuery()->getResult();
       // $resultAberto = $this->pesquisarBlocoAberto($unidade, $offset, $limit);
       // $resultRetorno = $this->pesquisarBlocoRetorno($unidade, $offset, $limit);

       // $result = $this->array_sort(array_merge($resultBloco, $resultAberto['result'], $resultRetorno['result']), 'idBloco');
        $count = ($paginator->count());

        return array('result' => $resultBloco, 'count' => $count);
    }

    public function pesquisarBlocoRetorno($unidade, $offset, $limit)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('b')
            ->from('Application\Entity\Bloco', 'b')
            ->join('b.relBlocoUnidade', 'bu')
            ->Where('b.idUnidade = :unidade')
            ->andWhere($qb->expr()->In('b.staTipo', array('A')))
            ->andWhere($qb->expr()->In('b.staEstado', array('R')))
            ->setParameter('unidade', $unidade)
            ->addOrderBy('b.idBloco', 'DESC');

        $qb->setFirstResult($offset)
            ->setMaxResults($limit);

        $paginator = new Paginator($qb, true);

        return array('result' => $paginator->getQuery()->getResult(), 'count' => $paginator->count());;
    }

    public function pesquisarBlocoAberto($unidade, $offset, $limit)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('b')
            ->from('Application\Entity\Bloco', 'b')
            ->join('b.relBlocoUnidade', 'bu')
            ->Where('b.idUnidade = :unidade')
            ->andWhere($qb->expr()->In('b.staTipo', array('A')))
            ->andWhere($qb->expr()->In('b.staEstado', array('A')))
            ->setParameter('unidade', $unidade)
            ->addOrderBy('b.idBloco', 'DESC');

        $qb->setFirstResult($offset)
            ->setMaxResults($limit);

        $paginator = new Paginator($qb, true);

        return array('result' => $paginator->getQuery()->getResult(), 'count' => $paginator->count());;
    }

    public function pesquisarProtocoloBloco($bloco)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('b, bp')
            ->from('Application\Entity\RelBlocoProtocolo', 'b')
            ->join('b.idBloco', 'bp')
            ->andWhere('bp.idBloco = :bloco')
            ->setParameter('bloco', $bloco)
            ->addOrderBy('b.idBloco', 'DESC');

        return $qb->getQuery()->getResult();
    }
}

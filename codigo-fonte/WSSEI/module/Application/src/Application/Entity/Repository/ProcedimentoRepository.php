<?php

namespace Application\Entity\Repository;

use Doctrine\Common\Util\Debug;
use Base\Entity\Repository\AbstractEntityRepository;
use Application;
use Doctrine\ORM\Query\Expr\Join;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ProcedimentoRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProcedimentoRepository extends AbstractEntityRepository
{
    public function pesquisarProcedimentoPorProtocolo($protocolo)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('p')
            ->from('Application\Entity\Procedimento', 'p')
            ->where('p.protocolo = :protocolo')
            ->setParameter('protocolo', $protocolo);

        return $qb->getQuery()->getResult();
    }

    public function listarProcessos($unidade, $tipo, $usuario, $limit, $offset)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('p, t, pt, a')
           ->from('Application\Entity\Procedimento', 'p')
            ->leftJoin('p.idTipoProcedimento', 't')
            ->join('p.protocolo', 'pt')
            ->join('pt.atividades', 'a')
            ->andWhere('a.dthConclusao is NULL')
            ->addOrderBy('a.dthAbertura', 'DESC');

        if ($tipo == 'M') {
            $qb->andWhere('a.idUsuarioAtribuicao = :usuario')
                ->setParameter('usuario', $usuario)
                ->andWhere('a.idUnidade = :unidade')
                ->setParameter('unidade', $unidade);
        } else {
            if ($tipo == 'G') {
                $qb->andWhere('a.idUnidade = :unidade')
                    ->setParameter('unidade', $unidade)
                    ->andWhere('pt.staEstado <> :estado')
                    ->setParameter('estado', 1)
                    ->andWhere('a.sinInicial = :inicial')
                    ->setParameter('inicial', 'S');
            } else {
                $qb->andWhere('a.idUnidade = :unidade')
                    ->setParameter('unidade', $unidade)
                    ->andWhere('pt.staEstado <> :estado')
                    ->andWhere('a.sinInicial = :inicial')
                    ->andWhere('a.idTarefa <> :tarefa')
                    ->setParameter('inicial', 'N')
                    ->setParameter('estado', 1)
                    ->setParameter('tarefa', 1);
            }
        }

        $qb->setFirstResult($offset)
           ->setMaxResults($limit);

        $paginator = new Paginator($qb, true);

        return array('result' => $paginator->getQuery()->getResult(), 'count' => $paginator->count());
    }

    public function pesquisarProcesso($protocolo, $idProtocolo, $limit, $offset)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('p, t, pt, a')
            ->from('Application\Entity\Procedimento', 'p')
            ->leftJoin('p.idTipoProcedimento', 't')
            ->join('p.protocolo', 'pt')
            ->join('pt.atividades', 'a')
            ->where('a.dthConclusao is NULL')
            ->addOrderBy('a.dthAbertura', 'DESC');

        if ($idProtocolo) {
            $qb->andWhere('pt.idProtocolo = :idprotocolo');
            $qb->setParameter('idprotocolo', $idProtocolo);
        }

        if ($protocolo) {
            $qb->andWhere('pt.protocoloFormatadoPesquisa = :protocolo');
            $qb->setParameter('protocolo', $protocolo);
        }

        $qb->setFirstResult($offset)
            ->setMaxResults($limit);

        $paginator = new Paginator($qb, true);

        return array('result' => $paginator->getQuery()->getResult(), 'count' => $paginator->count());
    }

    public function pesquisarProcessoAcompanhamento($usuario, $grupo, $limit, $offset)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('p, t, pt, a')
            ->from('Application\Entity\Procedimento', 'p')
            ->leftJoin('p.idTipoProcedimento', 't')
            ->join('p.protocolo', 'pt')
            ->join('pt.acompanhamento', 'a');

        /*$qb->where('a.idUsuarioGerador = :usuario');
        $qb->setParameter('usuario', $usuario);*/

        if ($grupo) {
            $qb->andWhere('a.idGrupoAcompanhamento = :grupo');
            $qb->setParameter('grupo', $grupo);
        }

        $qb->setFirstResult($offset)
            ->setMaxResults($limit);

        $paginator = new Paginator($qb, true);

        return array('result' => $paginator->getQuery()->getResult(), 'count' => $paginator->count());
    }
}

<?php

namespace Application\Entity\Repository;

use Base\Entity\Repository\AbstractEntityRepository;
use Application;
use Doctrine\Common\Util\Debug;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * AtividadeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AtividadeRepository extends AbstractEntityRepository
{
    public function listarAtividades ($procedimento, $unidade, $limit, $offset) {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('A, U, T')
            ->from('Application\Entity\Atividade', 'A')
            ->leftjoin('A.idUnidade', 'U')
            ->join('A.idTarefa', 'T')
            ->where('A.idProtocolo = :procedimento')
            //->andWhere('A.idUnidade = :unidade')
            ->setParameter('procedimento', $procedimento)
            //->setParameter('unidade', $unidade)
            ->addOrderBy('A.dthAbertura', 'DESC');

        $qb->setFirstResult($offset)
            ->setMaxResults($limit);

        $paginator = new Paginator($qb, true);

        return array('result' => $paginator->getQuery()->getResult(), 'count' => $paginator->count());
    }

    public function perquisarAtividadeRetornoProgramado($idProtocolo)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('A')
            ->from('Application\Entity\Atividade', 'A')
            ->join('A.retornoProgamado', 'RP')
            ->where('A.idProtocolo = :protocolo')
            ->setParameter('protocolo', $idProtocolo);

        return $qb->getQuery()->getResult();
    }

    public function perquisarAtividadeSobrestamento($idProtocolo, $unidade)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('A')
            ->from('Application\Entity\Atividade', 'A')
            ->where('A.idProtocolo = :protocolo')
            ->andWhere('A.idUnidade = :unidade')
            ->andWhere('A.dthConclusao IS NULL')
            ->andWhere('A.idTarefa = :tarefa')
            ->setParameter('protocolo', $idProtocolo)
            ->setParameter('unidade', $unidade)
            ->setParameter('tarefa', 20);

        return $qb->getQuery()->getResult();
    }

    public function getAtividadeCiencia($protocolo, $tarefa)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('A')
            ->from('Application\Entity\Atividade', 'A')
            ->where('A.idProtocolo = :protocolo')
            ->andWhere('A.idTarefa = :tarefa')
            ->setParameter('protocolo', $protocolo)
            ->setParameter('tarefa', $tarefa);



        return $qb->getQuery()->getResult();
    }

    public function pesquisarProtocoloUnidades($protocolo)
    {
        $qb = $this->_em->createQueryBuilder();
        $qb->select('a')
            ->from('Application\Entity\Atividade', 'a')
            ->Where('a.idProtocolo = :protocolo')
            ->andWhere('a.dthConclusao IS NULL')
            ->setParameter('protocolo', $protocolo);

        return $qb->getQuery()->getResult();
    }

    public function maxAtividade() {
        $id = 0;
        $qb = $this->_em->createQueryBuilder();

        $qb->select('MAX(a.idAtividade) AS id')
            ->from('Application\Entity\Atividade', 'a');

        $result = $qb->getQuery()->getArrayResult();

        if (count($result))
            $id = $result[0]['id'];

        return $id;
    }
}

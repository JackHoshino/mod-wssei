<?php

namespace Application\Entity\Repository;

use Base\Entity\Repository\AbstractEntityRepository;
use Application;

/**
 * AssinaturaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AssinaturaRepository extends AbstractEntityRepository
{
    public function pesquisarAssinatura($documento=null, $usuario=null, $cargo=null, $unidade=null) {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('a')
            ->from('Application\Entity\Assinatura', 'a');

        if ($documento) {
            $qb->andWhere('a.idDocumento = :documento')
               ->setParameter('documento', $documento);
        }

        if ($usuario) {
            $qb->andWhere('a.idUsuario = :usuario')
               ->setParameter('usuario', $usuario);
        }

        if ($cargo) {
            $qb->andWhere('a.tratamento = :cargo')
                ->setParameter('cargo', $cargo);
        }

        if ($unidade) {
            $qb->andWhere('a.idUnidade = :unidade')
                ->setParameter('unidade', $unidade);
        }

        return $qb->getQuery()->getResult();
    }

    public function pesquisarDocumentoAssinatura($procedimento, $documento) {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('a')
            ->from('Application\Entity\Documento', 'd')
            ->join('d.assinaturas', 'a');

        $qb->andWhere('d.idProcedimento = :procedimento')
            ->setParameter('procedimento', $procedimento)
            ->andWhere('d.idDocumento = :documento')
            ->setParameter('documento', $documento);

        return $qb->getQuery()->getResult();
    }

    public function maxAssinatura() {
        $id = 0;
        $qb = $this->_em->createQueryBuilder();

        $qb->select('MAX(a.idAssinatura) AS id')
            ->from('Application\Entity\Assinatura', 'a');

        $result = $qb->getQuery()->getArrayResult();

        if (count($result) > 0)
            $id = $result[0]['id'];

        return $id;
    }


}
